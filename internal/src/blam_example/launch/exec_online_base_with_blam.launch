<launch>
  <arg name="robot_namespace" default="robot"/>

    <!-- optional filename of the zip archive of a pose graph to be loaded -->
  <arg name="load_pose_graph_file" default=""/> 

  <group ns="$(arg robot_namespace)">

    <!-- Pose graph visualization -->
    <node pkg="pose_graph_visualizer"
          name="pose_graph_visualizer"
          type="pose_graph_visualizer_node"
          output="screen">
      <!-- Frames -->
      <rosparam file="$(find blam_example)/config/blam_frames.yaml" subst_value="true"/>
      
      <!-- Loop closure -->
      <rosparam file="$(find laser_loop_closure)/config/parameters.yaml"/>
    </node>

    <node pkg="blam_slam"
          name="blam_slam"
          type="blam_slam_node"
          output="screen">

      <!-- Load graph -->
      <param name="load_graph" value="$(arg load_pose_graph_file)"/>

      <!-- Topics -->
      <remap from="~pcld" to="velodyne_points/transformed"/>
      <remap from="~artifact" to="~artifact_global" />
      <remap from="~artifact_relative" to="artifact_reconciliation/reconciled_artifact" />
      <remap from="~uwb_signal" to="comm/uwb/anchor" />

      <!-- Serives -->
      <remap from="~drop_uwb_anchor" to="drop_uwb_anchor"/>

      <!-- Initial pose -->
      <rosparam param="init">
        position: {x: 0.0, y: 0.0, z: 0.0}
        orientation: {roll: 0.0, pitch: 0.0, yaw: 0.0}
        position_sigma: {x: 0.316, y: 0.316, z: 0.316}
        orientation_sigma: {roll: 0.141, pitch: 0.141, yaw: 0.141}
      </rosparam>

      <!-- Noise parameters -->
      <rosparam param="noise">
        odom_position_sigma: 0.6324
        odom_attitude_sigma: 0.316
      </rosparam>      

      <!-- Rates -->
      <rosparam file="$(find blam_example)/config/blam_rates.yaml"/>

      <!-- Frames -->
      <rosparam file="$(find blam_example)/config/blam_frames.yaml" subst_value="true"/>

      <!-- List of UWB anchors -->
      <rosparam file="$(find blam_example)/config/dropped_items_list.yaml"/>

      <!-- Point cloud filter -->
      <rosparam file="$(find point_cloud_filter)/config/parameters.yaml"/>

      <!-- Point cloud odometry -->
      <rosparam file="$(find point_cloud_odometry)/config/parameters.yaml"/>

      <!-- Point cloud localization -->
      <rosparam file="$(find point_cloud_localization)/config/parameters.yaml"/>

      <!-- Point cloud mapper -->
      <rosparam file="$(find point_cloud_mapper)/config/parameters.yaml"/>

      <!-- Point cloud visualization -->
      <rosparam file="$(find point_cloud_visualizer)/config/parameters.yaml"/>

      <!-- General Setup and Loop closure -->
      <rosparam file="$(find laser_loop_closure)/config/setup_parameters.yaml"/>
      <rosparam file="$(find laser_loop_closure)/config/pose_graph_parameters.yaml"/>
      <rosparam file="$(find laser_loop_closure)/config/loop_closure_parameters.yaml"/>
      <rosparam file="$(find laser_loop_closure)/config/uwb_parameters.yaml"/>
      <rosparam file="$(find laser_loop_closure)/config/robustness_parameters.yaml"/>

      <!-- Multirobot -->
      <rosparam file="$(find blam_slam)/config/parameters.yaml"/>

      <!-- show which to subscribe to of the robots -->
      <rosparam file="$(find laser_loop_closure)/config/robot_names.yaml" />

      <!-- See if LAMP is run as basestation -->
      <param name="b_is_basestation" value="true" type="bool" if="$(eval robot_namespace == 'base_station')"/>
      <param name="b_is_basestation" value="false" type="bool" unless="$(eval robot_namespace == 'base_station')"/>

    </node>

    <node pkg="tf2_ros" 
        type="static_transform_publisher"
        name="base2world"
        args="0 0 0 0 0 0 $(arg robot_namespace)/map /world" >
    </node>

    <node pkg="blam_slam"
      name="loop_closure_tools"
      type="loop_closure_tools.py"
      output="screen">
    </node>

  </group>

</launch>
